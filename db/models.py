import psycopg2 as psycopg2
from aiogram.types import ReplyKeyboardMarkup
from decouple import config

from create_bot import bot

con = psycopg2.connect(dbname=config('dbname'), user=config('user'), password=config('password'), host=config('host'),
                       port=config('port'))
cur = con.cursor()


def psql_read_desert():
    cur.execute('SELECT name, description, price, weight FROM menu_menu WHERE category_id=142')
    query_results = cur.fetchall()
    for row in query_results:
        text = '\n'.join([f''.join(map(str, '\n' + 'üßÅ' + str(x[0]) + '\n–û–ø–∏—Å–∞–Ω–∏–µ: ' + str(x[1]) + '\n–¶–µ–Ω–∞: ' + str(
            x[2]) + '‚ÇΩ | ' + str(x[3]))) + '–≥.' for x in query_results])
        return str(text)


def psql_read_napitki():
    cur.execute('SELECT name, description, price, weight FROM menu_menu WHERE category_id=10')
    query_results = cur.fetchall()
    for row in query_results:
        text = '\n'.join([f''.join(map(str, '\n' + 'ü•§' + str(x[0]) + '\n–û–ø–∏—Å–∞–Ω–∏–µ: ' + str(x[1]) + '\n–¶–µ–Ω–∞: ' + str(
            x[2]) + '‚ÇΩ | ' + str(x[3]))) + '–≥.' for x in query_results])
        return str(text)


def psql_read_hinkali():
    cur.execute('SELECT name, description, price, weight FROM menu_menu WHERE category_id=9')
    query_results = cur.fetchall()
    for row in query_results:
        text = '\n'.join([f''.join(map(str, '\n' + 'ü•ü' + str(x[0]) + '\n–û–ø–∏—Å–∞–Ω–∏–µ: ' + str(x[1]) + '\n–¶–µ–Ω–∞: ' + str(
            x[2]) + '‚ÇΩ | ' + str(x[3]))) + '–≥.' for x in query_results])
        return str(text)


def psql_read_sous():
    cur.execute('SELECT name, description, price, weight FROM menu_menu WHERE category_id=8')
    query_results = cur.fetchall()
    for row in query_results:
        text = '\n'.join([f''.join(map(str, '\n' + 'ü•´' + str(x[0]) + '\n–û–ø–∏—Å–∞–Ω–∏–µ: ' + str(x[1]) + '\n–¶–µ–Ω–∞: ' + str(
            x[2]) + '‚ÇΩ | ' + str(x[3]))) + '–≥.' for x in query_results])
        return str(text)


def psql_read_garnir():
    cur.execute('SELECT name, description, price, weight FROM menu_menu WHERE category_id=7')
    query_results = cur.fetchall()
    for row in query_results:
        text = '\n'.join([f''.join(map(str, '\n' + 'üçù' + str(x[0]) + '\n–û–ø–∏—Å–∞–Ω–∏–µ: ' + str(x[1]) + '\n–¶–µ–Ω–∞: ' + str(
            x[2]) + '‚ÇΩ | ' + str(x[3]))) + '–≥.' for x in query_results])
        return str(text)


def psql_read_soup():
    cur.execute('SELECT name, description, price, weight FROM menu_menu WHERE category_id=6')
    query_results = cur.fetchall()
    for row in query_results:
        text = '\n'.join([f''.join(map(str, '\n' + 'üçú' + str(x[0]) + '\n–û–ø–∏—Å–∞–Ω–∏–µ: ' + str(x[1]) + '\n–¶–µ–Ω–∞: ' + str(
            x[2]) + '‚ÇΩ | ' + str(x[3]))) + '–≥.' for x in query_results])
        return str(text)


def psql_read_zakuski():
    cur.execute('SELECT name, description, price, weight FROM menu_menu WHERE category_id=5')
    query_results = cur.fetchall()
    for row in query_results:
        text = '\n'.join([f''.join(map(str, '\n' + 'üç¢' + str(x[0]) + '\n–û–ø–∏—Å–∞–Ω–∏–µ: ' + str(x[1]) + '\n–¶–µ–Ω–∞: ' + str(
            x[2]) + '‚ÇΩ | ' + str(x[3]))) + '–≥.' for x in query_results])
        return str(text)


def psql_read_mangal():
    cur.execute('SELECT name, description, price, weight FROM menu_menu WHERE category_id=4')
    query_results = cur.fetchall()
    for row in query_results:
        text = '\n'.join([f''.join(map(str, '\n' + 'ü•©' + str(x[0]) + '\n–û–ø–∏—Å–∞–Ω–∏–µ: ' + str(x[1]) + '\n–¶–µ–Ω–∞: ' + str(
            x[2]) + '‚ÇΩ | ' + str(x[3]))) + '–≥.' for x in query_results])
        return str(text)


def psql_read_goryachee():
    cur.execute('SELECT name, description, price, weight FROM menu_menu WHERE category_id=3')
    query_results = cur.fetchall()
    for row in query_results:
        text = '\n'.join([f''.join(map(str, '\n' + 'üç≤' + str(x[0]) + '\n–û–ø–∏—Å–∞–Ω–∏–µ: ' + str(x[1]) + '\n–¶–µ–Ω–∞: ' + str(
            x[2]) + '‚ÇΩ | ' + str(x[3]))) + '–≥.' for x in query_results])
        return str(text)


def psql_read_salati():
    cur.execute('SELECT name, description, price, weight FROM menu_menu WHERE category_id=2')
    query_results = cur.fetchall()
    for row in query_results:
        text = '\n'.join([f''.join(map(str, '\n' + 'ü•ó' + str(x[0]) + '\n–û–ø–∏—Å–∞–Ω–∏–µ: ' + str(x[1]) + '\n–¶–µ–Ω–∞: ' + str(
            x[2]) + '‚ÇΩ | ' + str(x[3]))) + '–≥.' for x in query_results])
        return str(text)


def psql_read_pechka():
    cur.execute('SELECT name, description, price, weight FROM menu_menu WHERE category_id=1')
    query_results = cur.fetchall()
    for row in query_results:
        text = '\n'.join([f''.join(map(str, '\n' + 'ü•Æ' + str(x[0]) + '\n–û–ø–∏—Å–∞–Ω–∏–µ: ' + str(x[1]) + '\n–¶–µ–Ω–∞: ' + str(
            x[2]) + '‚ÇΩ | ' + str(x[3]))) + '–≥.' for x in query_results])
        return str(text)


def psql_read():
    cur.execute('SELECT name FROM menu_category')
    query_results = cur.fetchall()
    text = 'üßæ–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é:' + '\n‚Äî' + '\n‚Äî'.join([', '.join(map(str, x)) for x in query_results])
    return str(text)


cur.execute('''
CREATE TABLE IF NOT EXISTS –¢–∏–ø—ã (
    id SERIAL PRIMARY KEY,
    –¢–∏–ø TEXT);

''')
con.commit()


cur.execute('''
CREATE TABLE IF NOT EXISTS –°—Ç–æ–ª–∏–∫–∏ (
    id SERIAL PRIMARY KEY,
    –°—Ç–æ–ª–∏–∫ INTEGER NOT NULL,
    –¢–∏–ø INT NOT NULL,
    FOREIGN KEY(–¢–∏–ø) REFERENCES –¢–∏–ø—ã,
    place INTEGER NOT NULL);

''')
con.commit()


cur.execute('''
CREATE TABLE IF NOT EXISTS –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (
    id SERIAL PRIMARY KEY,
    –°—Ç–æ–ª–∏–∫ INTEGER,
    –î–∞—Ç–∞ DATE NOT NULL,
    FOREIGN KEY(–°—Ç–æ–ª–∏–∫) REFERENCES –°—Ç–æ–ª–∏–∫–∏(id),
    CONSTRAINT –ë—Ä–æ–Ω—å UNIQUE (–°—Ç–æ–ª–∏–∫, –î–∞—Ç–∞));
''')
con.commit()


def table_read():
    cur.execute('SELECT * FROM –¢–∏–ø—ã')
    query_results = cur.fetchall()
    text = '–í –∫–∞–∫–æ–º –∑–∞–ª–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª?'
    return str(text)

# üóì–ù–∞ –∫–∞–∫–æ–µ —á–∏—Å–ª–æ –∂–µ–ª–∞–µ—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª?\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD


def table_VIP():
    cur.execute('SELECT –°—Ç–æ–ª–∏–∫, place FROM –°—Ç–æ–ª–∏–∫–∏ WHERE –¢–∏–ø=1')
    query_results = cur.fetchall()
    for row in query_results:
        text = '‚öúVIP-–∑–∞–ª‚öú\n\nüõë–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—èüõë\n'+'\n'.join([f''.join(map(str, '\n' + 'VIP-–∑–∞–ª ‚Ññ' + str(x[0]) + ' | ' + '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: ' + str(x[1]))) for x in query_results])
        return str(text)


def table_mer():
    cur.execute('SELECT –°—Ç–æ–ª–∏–∫, place FROM –°—Ç–æ–ª–∏–∫–∏ WHERE –¢–∏–ø=2')
    query_results = cur.fetchall()
    for row in query_results:
        text = '–ó–∞–ª –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n\nüõë–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—èüõë\n'+'\n'.join([f''.join(map(str, '\n' + '–°—Ç–æ–ª–∏–∫ ‚Ññ' + str(x[0]) + ' | ' + '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: ' + str(x[1]))) for x in query_results])
        return str(text)


def table_ver():
    cur.execute('SELECT –°—Ç–æ–ª–∏–∫, place FROM –°—Ç–æ–ª–∏–∫–∏ WHERE –¢–∏–ø=3')
    query_results = cur.fetchall()
    for row in query_results:
        text = '–í–µ—Ä–∞–Ω–¥–∞\n\nüõë–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—èüõë\n'+'\n'.join([f''.join(map(str, '\n' + '–°—Ç–æ–ª–∏–∫ ‚Ññ' + str(x[0]) + ' | ' + '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: ' + str(x[1]))) for x in query_results])
        return str(text)


def table_1():
    cur.execute('SELECT –°—Ç–æ–ª–∏–∫, place FROM –°—Ç–æ–ª–∏–∫–∏ WHERE –¢–∏–ø=4')
    query_results = cur.fetchall()
    for row in query_results:
        text = '–ó–∞–ª ‚Ññ1\n\nüõë–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—èüõë\n'+'\n'.join([f''.join(map(str, '\n' + '–°—Ç–æ–ª–∏–∫ ‚Ññ' + str(x[0]) + ' | ' + '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: ' + str(x[1]))) for x in query_results])
        return str(text)


def table_2():
    cur.execute('SELECT –°—Ç–æ–ª–∏–∫, place FROM –°—Ç–æ–ª–∏–∫–∏ WHERE –¢–∏–ø=5')
    query_results = cur.fetchall()
    for row in query_results:
        text = '–ó–∞–ª ‚Ññ2\n\nüõë–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—èüõë\n'+'\n'.join([f''.join(map(str, '\n' + '–°—Ç–æ–ª–∏–∫ ‚Ññ' + str(x[0]) + ' | ' + '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: ' + str(x[1]))) for x in query_results])
        return str(text)


def table_3():
    cur.execute('SELECT –°—Ç–æ–ª–∏–∫, place FROM –°—Ç–æ–ª–∏–∫–∏ WHERE –¢–∏–ø=6')
    query_results = cur.fetchall()
    for row in query_results:
        text = '–ó–∞–ª ‚Ññ3\n\nüõë–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—èüõë\n'+'\n'.join([f''.join(map(str, '\n' + '–°—Ç–æ–ª–∏–∫ ‚Ññ' + str(x[0]) + ' | ' + '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: ' + str(x[1]))) for x in query_results])
        return str(text)
